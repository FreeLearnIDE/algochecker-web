"""
Django settings for algoweb project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import bleach

from django.contrib.messages import constants as messages
from markdown.extensions.codehilite import CodeHiliteExtension

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# this is the development value which can be used on the development servers
SECRET_KEY = 'ix+z#75!7wojltbt8h*w5@_n#db-54)#ue&_mle1+bk^l8&_+v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'webapp.apps.WebappConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_cas_ng'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'algoweb.middleware.csp_middleware',
    # 'algoweb.middleware.restrict_admin_middleware'
]

ROOT_URLCONF = 'algoweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [
            os.path.join(BASE_DIR, 'webapp/templates/jinja2'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'algoweb.jinja2env.environment',
            'extensions': ['jinja2.ext.with_'],
            'trim_blocks': True,
            'lstrip_blocks': True,
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ]
        },
    },
]

WSGI_APPLICATION = 'algoweb.wsgi.application'


# Maintenance info

MAINTENANCE_WARN = {
    'active': False,
    'color': 'danger',
    'icon': 'info-sign',
    'message': 'Maintenance message throughout the site'
}


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'algoweb',
        'USER': 'algoweb',
        'PASSWORD': 'algoweb123',
        'HOST': '127.0.0.1',
        'PORT': '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Authentication via CAS

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'django_cas_ng.backends.CASBackend'
)


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Media files (submissions, packages etc.)
MEDIA_ROOT = os.path.join(BASE_DIR, 'webapp/media')

# URL for a CAS server
# If you want to do some testing, you may use simplecas.
# In order to do so, comment the first line and uncomment the second one.
# Remember to start simplecas by running $ python contrib/simplecas/simplecas.py command.

CAS_SERVER_NAME = "EReS system"

CAS_SERVER_URL = "http://127.0.0.1:5044"
CAS_LOGIN_MSG = None
CAS_LOGGED_MSG = None

# Maps the attributes received from CAS, which means:
# first name will be in the attribute "givenName" etc
CAS_KEY_EXTERNAL_ID = "elkaEresId"
CAS_KEY_FIRST_NAME = "givenName"
CAS_KEY_LAST_NAME = "sn"
CAS_KEY_EMAIL = "mail"

# Tells that if attribute "employeeType" has value "P" then our user should have admin rights
# otherwise is treated as normal user
CAS_KEY_ADMIN_FLAG = "employeeType"
CAS_KEY_ADMIN_FLAG_VALUES = ["P"]

CSV_FIRST_NAME = lambda row: row['Imiona'],
CSV_LAST_NAME = lambda row: row['Nazwisko'],
CSV_EXTERNAL_ID = lambda row: row['XID'].split('_')[1]

# We need to avoid overlap between internal accounts and CAS accounts if both authentication methods are supported.
# Here we assume that CAS never returns a user name suffixed with double underscore, so we can append such characters
# to the end of our internal user usernames.
INTERNAL_USERNAME_FORMAT = "{}__"

# Bootstrap mapping for flashbag message tags

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-warning',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger'
}

# SMTP Configuration
EMAIL_HOST = 'localhost'
EMAIL_PORT = 25
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_SENDER_INVITATION = 'invite@testalgo.invalid'
EMAIL_SENDER_NOTIFIER = 'notify@testalgo.invalid'
EMAIL_SENDER_RESET = 'reset@testalgo.invalid'
EMAIL_RECIPIENT_NOTIFIER = ['admin@example.com']

# Redis connection details
# For the possible arguments see: https://redis-py.readthedocs.org/en/latest/#redis.Redis

REDIS_CONFIG = {
    'host': 'localhost',
    'port': 6379,
    'password': None
}

REDIS_POOL_CONFIG = REDIS_CONFIG.copy()
REDIS_POOL_CONFIG.update({
    'max_connections': 2,
    'socket_connect_timeout': 10,
    'socket_timeout': 10
})

# Package hosting details

# Authentication key which is used to generate package URLs (keep in secret)
PACKAGE_AUTH_KEY = 'ed8351792c6c49fcbae87fbefdad55f5'.encode('utf-8')
# Package repository URL which is sent to the worker
PACKAGE_URL = 'http://10.0.2.2:8000'

# Markdown

MARKDOWN_EXT = [
    'markdown.extensions.tables',
    'markdown.extensions.fenced_code',
    'mdx_math',
    CodeHiliteExtension(noclasses=False, css_class='highlight-no-lines')
]

BLEACH = {
    'ALLOWED_TAGS': [
        'ul',
        'ol',
        'li',
        'p',
        'pre',
        'code',
        'blockquote',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'hr',
        'br',
        'strong',
        'em',
        'a',
        'img',
        'div',
        'span',
        'table',
        'thead',
        'tbody',
        'tr',
        'th',
        'td',
    ],
    'ALLOWED_ATTRIBUTES': {
        'div': ['class'],
        'span': ['class'],
        'table': ['class'],
        'td': ['align'],
        'a': ['href', 'title'],
        'img': ['src', 'title', 'alt'],
    }
}

# Logging related stuff

LOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
            },
        },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
            },
        }
    }

if DEBUG:
    for logger in LOGGING['loggers']:
        LOGGING['loggers'][logger]['handlers'] = ['console']
